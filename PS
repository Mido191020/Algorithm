/*
⣿⣿⣿⣿⣿⣿⡷⣯⢿⣿⣷⣻⢯⣿⡽⣻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠸⣿⣿⣆⠹⣿⣿⢾⣟⣯⣿⣿⣿⣿⣿⣿⣽⣻⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣻⣽⡿⣿⣎⠙⣿⣞⣷⡌⢻⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⡄⠹⣿⣿⡆⠻⣿⣟⣯⡿⣽⡿⣿⣿⣿⣿⣽⡷⣯⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣟⣷⣿⣿⣿⡀⠹⣟⣾⣟⣆⠹⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢠⡘⣿⣿⡄⠉⢿⣿⣽⡷⣿⣻⣿⣿⣿⣿⡝⣷⣯⢿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣯⢿⣾⢿⣿⡄⢄⠘⢿⣞⡿⣧⡈⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣧⠘⣿⣷⠈⣦⠙⢿⣽⣷⣻⣽⣿⣿⣿⣿⣌⢿⣯⢿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣟⣯⣿⢿⣿⡆⢸⡷⡈⢻⡽⣷⡷⡄⠻⣽⣿⣿⡿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣏⢰⣯⢷⠈⣿⡆⢹⢷⡌⠻⡾⢋⣱⣯⣿⣿⣿⣿⡆⢻⡿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⡎⣿⢾⡿⣿⡆⢸⣽⢻⣄⠹⣷⣟⣿⣄⠹⣟⣿⣿⣟⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⡇⢸⣯⣟⣧⠘⣷⠈⡯⠛⢀⡐⢾⣟⣷⣻⣿⣿⣿⡿⡌⢿⣻⣿⣿
⣿⣿⣿⣿⣿⣿⣧⢸⡿⣟⣿⡇⢸⣯⣟⣮⢧⡈⢿⣞⡿⣦⠘⠏⣹⣿⣽⢿⣿⣿⣿⣿⣯⣿⣿⣿⡇⢸⣿⣿⣾⡆⠹⢀⣠⣾⣟⣷⡈⢿⣞⣯⢿⣿⣿⣿⢷⠘⣯⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡈⣿⢿⣽⡇⠘⠛⠛⠛⠓⠓⠈⠛⠛⠟⠇⢀⢿⣻⣿⣯⢿⣿⣿⣿⣷⢿⣿⣿⠁⣾⣿⣿⣿⣧⡄⠇⣹⣿⣾⣯⣿⡄⠻⣽⣯⢿⣻⣿⣿⡇⢹⣾⣿
⣿⣿⣿⣿⣿⣿⣿⡇⢹⣿⡽⡇⢸⣿⣿⣿⣿⣿⣞⣆⠰⣶⣶⡄⢀⢻⡿⣯⣿⡽⣿⣿⣿⢯⣟⡿⢀⣿⣿⣿⣿⣿⣧⠐⣸⣿⣿⣷⣿⣿⣆⠹⣯⣿⣻⣿⣿⣿⢀⣿⢿
⣿⣿⣿⣿⣿⣿⣿⣿⠘⣯⡿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣧⡈⢿⣳⠘⡄⠻⣿⢾⣽⣟⡿⣿⢯⣿⡇⢸⣿⣿⣿⣿⣿⣿⡀⢾⣿⣿⣿⣿⣿⣿⣆⠹⣾⣷⣻⣿⡿⡇⢸⣿
⣿⣿⣿⣿⣿⣿⣿⣿⡇⢹⣿⠇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠻⡇⢹⣆⠹⣟⣾⣽⣻⣟⣿⣽⠁⣾⣿⣿⣿⣿⣿⣿⣇⣿⣿⠿⠛⠛⠉⠙⠋⢀⠁⢘⣯⣿⣿⣧⠘⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⣿⡃⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡙⠌⣿⣆⠘⣿⣞⡿⣞⡿⡞⢠⣿⣿⣿⣿⣿⡿⠛⠉⠁⢀⣀⣠⣤⣤⣶⣶⣶⡆⢻⣽⣞⡿⣷⠈⣿
⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠘⠁⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⠛⠛⢿⣄⢻⣿⣧⠘⢯⣟⡿⣽⠁⣾⣿⣿⣿⣿⣿⡃⢀⢀⠘⠛⠿⢿⣻⣟⣯⣽⣻⣵⡀⢿⣯⣟⣿⢀⣿
⣿⣿⣿⣟⣿⣿⣿⣿⣶⣶⡆⢀⣿⣾⣿⣾⣷⣿⣶⠿⠚⠉⢀⢀⣤⣿⣷⣿⣿⣷⡈⢿⣻⢃⣼⣿⣿⣿⣿⣻⣿⣿⣿⡶⣦⣤⣄⣀⡀⠉⠛⠛⠷⣯⣳⠈⣾⡽⣾⢀⣿
⣿⢿⣿⣿⣻⣿⣿⣿⣿⣿⡿⠐⣿⣿⣿⣿⠿⠋⠁⢀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣌⣥⣾⡿⣿⣿⣷⣿⣿⢿⣷⣿⣿⣟⣾⣽⣳⢯⣟⣶⣦⣤⡾⣟⣦⠘⣿⢾⡁⢺
⣿⣻⣿⣿⡷⣿⣿⣿⣿⣿⡗⣦⠸⡿⠋⠁⢀⢀⣠⣴⢿⣿⣽⣻⢽⣾⣟⣷⣿⣟⣿⣿⣿⣳⠿⣵⣧⣼⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣽⣳⣯⣿⣿⣿⣽⢀⢷⣻⠄⠘
⣿⢷⣻⣿⣿⣷⣻⣿⣿⣿⡷⠛⣁⢀⣀⣤⣶⣿⣛⡿⣿⣮⣽⡻⣿⣮⣽⣻⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢀⢸⣿⢀⡆
⠸⣟⣯⣿⣿⣷⢿⣽⣿⣿⣷⣿⣷⣆⠹⣿⣶⣯⠿⣿⣶⣟⣻⢿⣷⣽⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣯⣟⢀⡇
⣇⠹⣟⣾⣻⣿⣿⢾⡽⣿⣿⣿⣿⣿⣆⢹⣶⣿⣻⣷⣯⣟⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢀⡿⡇⢸⡇
⣿⣆⠹⣷⡻⣽⣿⣯⢿⣽⣻⣿⣿⣿⣿⣆⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⢸⣿⠇⣼⡇
⡙⠾⣆⠹⣿⣦⠛⣿⢯⣷⢿⡽⣿⣿⣿⣿⣆⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠎⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⢀⣿⣾⣣⡿⡇
⣿⣷⡌⢦⠙⣿⣿⣌⠻⣽⢯⣿⣽⣻⣿⣿⣿⣧⠩⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢰⢣⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⢀⢀⢿⣞⣷⢿⡇
⣿⣽⣆⠹⣧⠘⣿⣿⡷⣌⠙⢷⣯⡷⣟⣿⣿⣿⣷⡀⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣈⠃⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢀⣴⡧⢀⠸⣿⡽⣿⢀
⢻⣽⣿⡄⢻⣷⡈⢿⣿⣿⢧⢀⠙⢿⣻⡾⣽⣻⣿⣿⣄⠌⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⢁⣰⣾⣟⡿⢀⡄⢿⣟⣿⢀
⡄⢿⣿⣷⢀⠹⣟⣆⠻⣿⣿⣆⢀⣀⠉⠻⣿⡽⣯⣿⣿⣷⣈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⢀⣠⠘⣯⣷⣿⡟⢀⢆⠸⣿⡟⢸
⣷⡈⢿⣿⣇⢱⡘⢿⣷⣬⣙⠿⣧⠘⣆⢀⠈⠻⣷⣟⣾⢿⣿⣆⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⣠⡞⢡⣿⢀⣿⣿⣿⠇⡄⢸⡄⢻⡇⣼
⣿⣷⡈⢿⣿⡆⢣⡀⠙⢾⣟⣿⣿⣷⡈⠂⠘⣦⡈⠿⣯⣿⢾⣿⣆⠙⠻⠿⠿⠿⠿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⢋⣠⣾⡟⢠⣿⣿⢀⣿⣿⡟⢠⣿⢈⣧⠘⢠⣿
⣿⣿⣿⣄⠻⣿⡄⢳⡄⢆⡙⠾⣽⣿⣿⣆⡀⢹⡷⣄⠙⢿⣿⡾⣿⣆⢀⡀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⣠⣴⡿⣯⠏⣠⣿⣿⡏⢸⣿⡿⢁⣿⣿⢀⣿⠆⢸⣿
⣿⣿⣿⣿⣦⡙⣿⣆⢻⡌⢿⣶⢤⣉⣙⣿⣷⡀⠙⠽⠷⠄⠹⣿⣟⣿⣆⢙⣋⣤⣤⣤⣄⣀⢀⢀⢀⢀⣾⣿⣟⡷⣯⡿⢃⣼⣿⣿⣿⠇⣼⡟⣡⣿⣿⣿⢀⡿⢠⠈⣿
⣿⣿⣿⣿⣿⣷⣮⣿⣿⣿⡌⠁⢤⣤⣤⣤⣬⣭⣴⣶⣶⣶⣆⠈⢻⣿⣿⣆⢻⣿⣿⣿⣿⣿⣿⣷⣶⣤⣌⣉⡘⠛⠻⠶⣿⣿⣿⣿⡟⣰⣫⣴⣿⣿⣿⣿⠄⣷⣿⣿⣿
*/
/*****************************************************************************\
|                                                                             |
|   $$\   $$\ $$\   $$\ $$$$$$$\    $$$$$$\   $$$$$$\  $$$$$$$\  $$$$$$$$\    |
|   $$ |  $$ |$$ | $$  |$$  __$$\  $$  __$$\ $$  __$$\ $$  __$$\ $$  _____|   |
|   $$ |  $$ |$$ |$$  / $$ |  $$ | $$ /  \__|$$ /  $$ |$$ |  $$ |$$ |	      |
//|   $$$$$$$$ |$$$$$  /  $$$$$$$  | $$ |      $$ |  $$ |$$ |  $$ |$$$$$\	      |
//|   $$  __$$ |$$  $$<   $$  __$$<  $$ |      $$ |  $$ |$$ |  $$ |$$  __|      |
//|   $$ |  $$ |$$ |\$$\  $$ |  $$ | $$ |  $$\ $$ |  $$ |$$ |  $$ |$$ |	      |
//|   $$ |  $$ |$$ | \$$\ $$ |  $$ | \$$$$$$  | $$$$$$  |$$$$$$$  |$$$$$$$$\    |
//|   \__|  \__|\__|  \__|\__|  \__|  \______/  \______/ \_______/ \________|   |
//|                                                                             |
//\*****************************************************************************/
#define faster ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define sz(x) int(x.size())
#define all(v)                          ((v).begin()), ((v).end())
#define en cout<<endl
//const int inf  = 1e18 + 11;
//int sumeven(int n){
//    int x=n;
//    return (1+n)*n/2;
//}
//int sumodd(int n){
//    return ((1+n)/2)*n;
//}
//bool is_pair(char right,char left){
//    if (right=='('&&left==')'){
//        return true;
//    }
//    else if (right=='['&&left==']'){
//        return true;
//    } else if (right=='{'&&left=='}'){
//        return true;
//    } else
//        return false;
//}
//bool isValid(string s) {
//stack<char>z;
//    for (int i = 0; i < s.size(); i++) {
//        if (s[i]=='('||s[i]=='['||s[i]=='{'){
//            z.push(s[i]);
//        } else if(s[i]==')'||s[i]=='}'||s[i]==']'){
//        if (z.empty()||!is_pair(z.top(),s[i])){
//            return false;
//        } else
//            z.pop();
//    }
//    }
//    return z.empty();
//}
//template <class T>
//istream & operator>> (istream&is , vector<T> &v )
//{
//    for (auto &i:v)
//        is>> i ;
//    return is ;
//}
//
//bool is_plind(string s){
//    deque<char>q;
//    for (char c:s)
//        q.push_back(c);
//    while (q.size()>1){
//        char f=q.front();
//        char b=q.back();
//        q.pop_front();
//        q.pop_back();
//        if (f!=b)
//            return false;
//    }
//    return true;
//}
ll gcd(ll a, ll  b) {
    if (a==0)
        return b;
    return gcd(b%a,a);
}
//
//
//int sol() {
//string s;cin>>s;
//int ct=0;
//    for (int i = 0; i < s.size(); ++i) {
//        int x=s[i]-'0';
////        cout<<x<<endl;
//        if(x==4||x==7)
//            ct++;
//    }
//
//    if (ct==4||ct==7){
//        yes
//    }
//    else
//        no
//}
//
////ll a[200000];
////ll s[1000000];
////void prefix_sum(){
////    int n,k;cin>>n>>k;
////    for (int i = 1; i <=n ; i++) {
////        cin>>a[i];
////    a[i]+=a[i-1];
////    }
////    int min=INT_MAX;
////    int in=0;
////    for (int i = k; i <=n ;i++) {
////        if (a[i]-a[i-k]<min){
////            min=a[i]-a[i-k];
////           in=i-k;
////        }
////    }
////    cout<<in+1;
////}
//bool istraingel(){
//    int n;cin>>n;
//    int a[n];
//    for (int i = 0; i < n; i++) {
//        cin>>a[i];
//    }
//
//    sort(a,a+n);
//    for (int i = 0; i < n-2; i++) {
//        if(a[i]+a[i+1]>a[i+2])
//            return true;
//    }
//    return false;
//}
//vector<int> twoSum(vector<int>& nums, int target) {
//    for(int i=0;i<=nums.size();i++){
//        if (nums[i]+nums[i+1]==target){
//            cout<<i<<" "<<i+1;
//            break;
//        }
//    }
//}
//class Mode{
//public:
//    ll add(ll a,ll b,ll m){
//        return ((a%m)+(b%m))%m;
//    }
//    ll sub(ll a,ll b,ll m){
//        return ((a%m)-(b%m)+m)%m;
//    }
//    ll mult(ll a,ll b,ll m){
//        return ((a%m)*(b%m))%m;
//    }
//};
//long factorial(const int n)
//{
//    long f = 1;
//    for (int i=1; i<=n; ++i)
//        f *= i;
//    return f;
//}
//ll  lcm(ll a,ll b){
//    return (a/gcd(a,b))*b;
//}double calc_sn(ll a,ll r, ll n){
//  return  (a*(1-pow(r,n)))/(1-r);
//}
bool check(int n){
    if(n<2)return 0;
    for(ll i=2;i<=n/i;i++){
        if(n%i==0)return 0;
    }
    return 1;
}
void sieveOfEratosthenes(int n){


    vector<bool>isPrime(n+1, true);
    for (int i = 2; i*i <=n ; i++) {
        if (isPrime[i]){
            for (int j = i*i; j <=n ; j+=i) {
                isPrime[j]= false;
            }
        }
    }
    for (int i = 2; i <=n ; i++) {
        if (isPrime[i])
            cout<<i<<endl;
    }
}
//bool compare(const array<ll, 2>& a, const array<ll, 2>& b) {
//    return a[1] < b[1];
//}
//
//void solve() {
//    ll n,m;
//    cin>>n>>m;
//    const ll x=2;
//    vector<array<ll, 2>> a(m);
//    for (int i = 0; i < m; i++) {
//        cin>>a[i][0]>>a[i][1];
//    }
//    sort(a.begin(),a.end(),compare);
//    set<array<ll, 2>> s;
//    for (auto it:a) {
//        s.insert(it);
//    }
//    for (const auto& arr : s) {
//        for (const auto& elem : arr) {
//            cout << elem << " ";
//        }
//    }
//cout<<m-s.size();
//}
bool compare(const array<ll, 2>& a, const array<ll, 2>& b) {
    return a[1] < b[1];
}

void solve() {
    int t;cin>>t;
    while (t--){
        int n,k;
    cin>>n>>k;
    string s;
    cin>>s;
        unordered_map<char, int> char_count;
        for (auto c:s) {
            char_count[c]++;
        }
        int bairs=0;
        for (char c='a';c<='z';c++){
            char uper= ::toupper(c);
            char lower= ::tolower(c);
            if (char_count[uper]==0||char_count[lower]==0)
                continue;
            int pair= min(char_count[lower],char_count[uper]);
            bairs+=pair;
            char_count[lower]-=pair;
            char_count[uper]-=pair;
        }
        for (int i = 0; i < 26&&k; ++i) {
           int val=char_count['a'+i]/2;
           val+=char_count['A'+i]/2;
           bairs+= min(k,val);
           k-= min(k,val);
        }
        cout<<bairs<<endl;
    }
}
//aAaaBACacbE

long long sum(long long arr[], int size, int lastnum, int counter){
    if(counter == lastnum){
        return 0;
    }
    counter++;
    return arr[size-1] + sum(arr, size-1, lastnum, counter);
}
